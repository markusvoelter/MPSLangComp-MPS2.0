package de.voelter.mps.textshape.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class makeStatement_Intention extends BaseIntention implements Intention {
  public makeStatement_Intention() {
  }

  public String getConcept() {
    return "de.voelter.mps.textshape.structure.MultiTextToken";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "make statement (add semicolon)";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode s = SNodeFactoryOperations.createNewNode("de.voelter.mps.textshape.structure.Statement", null);
    for (SNode c : ListSequence.fromList(SLinkOperations.getTargets(node, "tokens", true))) {
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(s, "token", true), "tokens", true)).addElement(c);
    }
    if (AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateFragment"))) != null) {
      AttributeOperations.setAttribute(s, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateFragment")), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateFragment"))));
    }
    SNodeOperations.replaceWithAnother(node, s);
  }

  public String getLocationString() {
    return "de.voelter.mps.textshape.intentions";
  }
}
