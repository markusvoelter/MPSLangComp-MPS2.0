package de.voelter.mps.textshape.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.CompiledConceptDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  private static String[] stringSwitchCases_1htk8d_a0a0a = new String[]{"de.voelter.mps.textshape.structure.File", "de.voelter.mps.textshape.structure.IFileContent", "de.voelter.mps.textshape.structure.IStatement", "de.voelter.mps.textshape.structure.IndentedBlock", "de.voelter.mps.textshape.structure.Line", "de.voelter.mps.textshape.structure.List", "de.voelter.mps.textshape.structure.MultiTextToken", "de.voelter.mps.textshape.structure.NeedsBlankLink", "de.voelter.mps.textshape.structure.PascalDeclaration", "de.voelter.mps.textshape.structure.PlaceHolder", "de.voelter.mps.textshape.structure.SingleTextToken", "de.voelter.mps.textshape.structure.Statement", "de.voelter.mps.textshape.structure.TextShapeConfig", "de.voelter.mps.textshape.structure.TextToken"};

  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {
      case 0:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.File", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{"ext"}, new String[]{"config"});
      case 1:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.IFileContent", null, true, new String[]{}, new String[]{}, new String[]{});
      case 2:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.IStatement", null, true, new String[]{}, new String[]{}, new String[]{});
      case 3:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.IndentedBlock", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "de.voelter.mps.textshape.structure.IFileContent"}, new String[]{"padding"}, new String[]{});
      case 4:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.Line", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "de.voelter.mps.textshape.structure.IFileContent"}, new String[]{}, new String[]{});
      case 5:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.List", "de.voelter.mps.textshape.structure.TextToken", false, new String[]{"de.voelter.mps.textshape.structure.TextToken", "de.voelter.mps.textshape.structure.IFileContent"}, new String[]{"opener", "closer", "delimiter"}, new String[]{});
      case 6:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.MultiTextToken", "de.voelter.mps.textshape.structure.TextToken", false, new String[]{"de.voelter.mps.textshape.structure.TextToken"}, new String[]{"noBlanks"}, new String[]{});
      case 7:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.NeedsBlankLink", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 8:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.PascalDeclaration", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "de.voelter.mps.textshape.structure.IFileContent", "de.voelter.mps.textshape.structure.IStatement"}, new String[]{"name"}, new String[]{});
      case 9:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.PlaceHolder", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "de.voelter.mps.textshape.structure.IFileContent"}, new String[]{}, new String[]{});
      case 10:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.SingleTextToken", "de.voelter.mps.textshape.structure.TextToken", false, new String[]{"de.voelter.mps.textshape.structure.TextToken"}, new String[]{"text"}, new String[]{});
      case 11:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.Statement", "de.voelter.mps.textshape.structure.Line", false, new String[]{"de.voelter.mps.textshape.structure.Line", "de.voelter.mps.textshape.structure.IFileContent", "de.voelter.mps.textshape.structure.IStatement"}, new String[]{}, new String[]{});
      case 12:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.TextShapeConfig", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{"statementDel", "blockOpener", "blockCloser", "exprOpener", "exprCloser"}, new String[]{});
      case 13:
        return new CompiledConceptDescriptor("de.voelter.mps.textshape.structure.TextToken", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }
}
