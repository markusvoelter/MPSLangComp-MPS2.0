package de.voelter.mps.textshape.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.smodel.SNode;
import de.voelter.mps.textshape.behavior.IFileContent_Behavior;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class IndentedBlock_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    if (IFileContent_Behavior.call_needsBlankLine_5815279313395613799(node)) {
      this.appendNewLine();
      this.indentBuffer();
    }
    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "prefix", true), this.getSNode());
    this.append(" ");
    if (SPropertyOperations.getString(IFileContent_Behavior.call_config_5815279313395467763(node), "blockOpener") != null) {
      this.append(SPropertyOperations.getString(IFileContent_Behavior.call_config_5815279313395467763(node), "blockOpener"));
    }
    this.appendNewLine();
    this.increaseDepth();
    for (SNode l : ListSequence.fromList(SLinkOperations.getTargets(node, "contents", true))) {
      this.indentBuffer();
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), l, this.getSNode());
      if (SNodeOperations.isInstanceOf(l, "de.voelter.mps.textshape.structure.IStatement")) {
        this.append(SPropertyOperations.getString(IFileContent_Behavior.call_config_5815279313395467763(l), "statementDel"));
      }
      this.appendNewLine();
    }
    this.decreaseDepth();
    // <node> 
    if (SPropertyOperations.getString(IFileContent_Behavior.call_config_5815279313395467763(node), "blockCloser") != null) {
      this.indentBuffer();
      this.append(SPropertyOperations.getString(IFileContent_Behavior.call_config_5815279313395467763(node), "blockCloser"));
      // <node> 
    }
  }
}
