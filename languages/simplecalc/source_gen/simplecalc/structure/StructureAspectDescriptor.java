package simplecalc.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.CompiledConceptDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  private static String[] stringSwitchCases_1htk8d_a0a0a = new String[]{"simplecalc.structure.ANdOP", "simplecalc.structure.Calculation", "simplecalc.structure.DocText", "simplecalc.structure.MyOwnDotExpression", "simplecalc.structure.Struct", "simplecalc.structure.StructMember", "simplecalc.structure.StructMemberAccess", "simplecalc.structure.StructRefExpression", "simplecalc.structure.StructType", "simplecalc.structure.SysContent", "simplecalc.structure.System", "simplecalc.structure.VarDecl", "simplecalc.structure.VarRefExpression"};

  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {
      case 0:
        return new CompiledConceptDescriptor("simplecalc.structure.ANdOP", "de.voelter.mps.expressions.structure.BinaryExpression", false, new String[]{"de.voelter.mps.expressions.structure.BinaryExpression"}, new String[]{}, new String[]{});
      case 1:
        return new CompiledConceptDescriptor("simplecalc.structure.Calculation", "simplecalc.structure.SysContent", false, new String[]{"simplecalc.structure.SysContent", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 2:
        return new CompiledConceptDescriptor("simplecalc.structure.DocText", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{"text"}, new String[]{});
      case 3:
        return new CompiledConceptDescriptor("simplecalc.structure.MyOwnDotExpression", "de.voelter.mps.expressions.structure.Expression", false, new String[]{"de.voelter.mps.expressions.structure.Expression", "de.voelter.mps.expressions.structure.IDotExpression"}, new String[]{}, new String[]{});
      case 4:
        return new CompiledConceptDescriptor("simplecalc.structure.Struct", "simplecalc.structure.SysContent", false, new String[]{"simplecalc.structure.SysContent", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 5:
        return new CompiledConceptDescriptor("simplecalc.structure.StructMember", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 6:
        return new CompiledConceptDescriptor("simplecalc.structure.StructMemberAccess", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "de.voelter.mps.expressions.structure.IMemberReference"}, new String[]{}, new String[]{"member"});
      case 7:
        return new CompiledConceptDescriptor("simplecalc.structure.StructRefExpression", "de.voelter.mps.expressions.structure.Expression", false, new String[]{"de.voelter.mps.expressions.structure.Expression", "de.voelter.mps.expressions.structure.ISimpleText"}, new String[]{}, new String[]{"struct"});
      case 8:
        return new CompiledConceptDescriptor("simplecalc.structure.StructType", "de.voelter.mps.expressions.structure.Type", false, new String[]{"de.voelter.mps.expressions.structure.Type", "de.voelter.mps.expressions.structure.IMemberContainer"}, new String[]{}, new String[]{"struct"});
      case 9:
        return new CompiledConceptDescriptor("simplecalc.structure.SysContent", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "de.voelter.mps.naming.structure.INamespaceContent"}, new String[]{}, new String[]{});
      case 10:
        return new CompiledConceptDescriptor("simplecalc.structure.System", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 11:
        return new CompiledConceptDescriptor("simplecalc.structure.VarDecl", "simplecalc.structure.SysContent", false, new String[]{"simplecalc.structure.SysContent", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{"isPublic"}, new String[]{});
      case 12:
        return new CompiledConceptDescriptor("simplecalc.structure.VarRefExpression", "de.voelter.mps.expressions.structure.Expression", false, new String[]{"de.voelter.mps.expressions.structure.Expression", "de.voelter.mps.expressions.structure.ISimpleText"}, new String[]{}, new String[]{"var"});
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }
}
