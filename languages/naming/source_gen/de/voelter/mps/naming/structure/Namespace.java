package de.voelter.mps.naming.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Namespace extends BaseConcept implements INamespaceContent, INamespace {
  public static final String concept = "de.voelter.mps.naming.structure.Namespace";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";
  public static final String IMPORTS = "imports";
  public static final String CONTENTS = "contents";

  public Namespace(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Namespace.NAME);
  }

  public void setName(String value) {
    this.setProperty(Namespace.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Namespace.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Namespace.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Namespace.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Namespace.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Namespace.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Namespace.VIRTUAL_PACKAGE, value);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Namespace.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Namespace.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Namespace.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Namespace.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Namespace.SMODEL_ATTRIBUTE, node);
  }

  public int getImportsesCount() {
    return this.getChildCount(Namespace.IMPORTS);
  }

  public Iterator<NamespaceImport> importses() {
    return this.children(NamespaceImport.class, Namespace.IMPORTS);
  }

  public List<NamespaceImport> getImportses() {
    return this.getChildren(NamespaceImport.class, Namespace.IMPORTS);
  }

  public void addImports(NamespaceImport node) {
    this.addChild(Namespace.IMPORTS, node);
  }

  public void insertImports(NamespaceImport prev, NamespaceImport node) {
    this.insertChild(prev, Namespace.IMPORTS, node);
  }

  public int getContentsesCount() {
    return this.getChildCount(Namespace.CONTENTS);
  }

  public Iterator<INamespaceContent> contentses() {
    return this.children(INamespaceContent.class, Namespace.CONTENTS);
  }

  public List<INamespaceContent> getContentses() {
    return this.getChildren(INamespaceContent.class, Namespace.CONTENTS);
  }

  public void addContents(INamespaceContent node) {
    this.addChild(Namespace.CONTENTS, node);
  }

  public void insertContents(INamespaceContent prev, INamespaceContent node) {
    this.insertChild(prev, Namespace.CONTENTS, node);
  }

  public static Namespace newInstance(SModel sm, boolean init) {
    return (Namespace) SModelUtil_new.instantiateConceptDeclaration("de.voelter.mps.naming.structure.Namespace", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Namespace newInstance(SModel sm) {
    return Namespace.newInstance(sm, false);
  }
}
