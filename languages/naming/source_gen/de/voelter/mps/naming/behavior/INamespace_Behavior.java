package de.voelter.mps.naming.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.structure.BehaviorDescriptor;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class INamespace_Behavior {
  private static Class[] PARAMETERS_7517722170421689483 = {SNode.class};
  private static Class[] PARAMETERS_7517722170421689521 = {SNode.class, SNode.class};
  private static Class[] PARAMETERS_7517722170421689560 = {SNode.class, SNode.class, List.class, Boolean.TYPE};

  public static void init(SNode thisNode) {
  }

  public static List<SNode> virtual_siblings_7517722170421689483(SNode thisNode) {
    SNode ns = INamespaceContent_Behavior.call_owningNamespace_5019556274771919323(thisNode);
    if (ns == null) {
      return new ArrayList<SNode>();
    }
    return SLinkOperations.getTargets(ns, "contents", true);
  }

  public static List<SNode> virtual_allVisibleNode_7517722170421689521(SNode thisNode, SNode ofType) {
    List<SNode> res = new ArrayList<SNode>();
    SNode n = thisNode;
    while (n != null) {
      INamespace_Behavior.call_collectVisibleElements_7517722170421689560(n, ofType, res, false);
      n = INamespaceContent_Behavior.call_owningNamespace_5019556274771919323(n);
    }
    return ListSequence.fromList(res).reversedList();
  }

  public static void virtual_collectVisibleElements_7517722170421689560(SNode thisNode, final SNode ofType, List<SNode> res, boolean publicOnly) {
    if (SNodeOperations.isInstanceOf(thisNode, "de.voelter.mps.naming.structure.Namespace")) {
      SNode ns = SNodeOperations.cast(thisNode, "de.voelter.mps.naming.structure.INamespace");
      if (publicOnly) {
        ListSequence.fromList(res).addSequence(ListSequence.fromList(SLinkOperations.getTargets(ns, "contents", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, NameUtil.nodeFQName(ofType)) && INamespaceContent_Behavior.call_isExternallyVisible_5856418980158996214(it);
          }
        }));
      } else {
        ListSequence.fromList(res).addSequence(ListSequence.fromList(SLinkOperations.getTargets(ns, "contents", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, NameUtil.nodeFQName(ofType));
          }
        }));
      }
      for (SNode imp : ListSequence.fromList(SLinkOperations.getTargets(ns, "imports", true))) {
        INamespace_Behavior.call_collectVisibleElements_7517722170421689560(SLinkOperations.getTarget(imp, "namespace", false), ofType, res, true);
      }
    }
  }

  public static List<SNode> call_siblings_7517722170421689483(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getConceptDescriptorForInstanceNode(thisNode).behavior();
    return (List<SNode>) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "de.voelter.mps.naming.structure.INamespace"), "virtual_siblings_7517722170421689483", PARAMETERS_7517722170421689483);
  }

  public static List<SNode> call_allVisibleNode_7517722170421689521(SNode thisNode, SNode ofType) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getConceptDescriptorForInstanceNode(thisNode).behavior();
    return (List<SNode>) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "de.voelter.mps.naming.structure.INamespace"), "virtual_allVisibleNode_7517722170421689521", PARAMETERS_7517722170421689521, ofType);
  }

  public static void call_collectVisibleElements_7517722170421689560(SNode thisNode, SNode ofType, List<SNode> res, boolean publicOnly) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getConceptDescriptorForInstanceNode(thisNode).behavior();
    descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "de.voelter.mps.naming.structure.INamespace"), "virtual_collectVisibleElements_7517722170421689560", PARAMETERS_7517722170421689560, ofType, res, publicOnly);
  }

  public static List<SNode> callSuper_siblings_7517722170421689483(SNode thisNode, String callerConceptFqName) {
    return (List<SNode>) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "de.voelter.mps.naming.structure.INamespace"), callerConceptFqName, "virtual_siblings_7517722170421689483", PARAMETERS_7517722170421689483);
  }

  public static List<SNode> callSuper_allVisibleNode_7517722170421689521(SNode thisNode, String callerConceptFqName, SNode ofType) {
    return (List<SNode>) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "de.voelter.mps.naming.structure.INamespace"), callerConceptFqName, "virtual_allVisibleNode_7517722170421689521", PARAMETERS_7517722170421689521, ofType);
  }

  public static void callSuper_collectVisibleElements_7517722170421689560(SNode thisNode, String callerConceptFqName, SNode ofType, List<SNode> res, boolean publicOnly) {
    BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "de.voelter.mps.naming.structure.INamespace"), callerConceptFqName, "virtual_collectVisibleElements_7517722170421689560", PARAMETERS_7517722170421689560, ofType, res, publicOnly);
  }
}
