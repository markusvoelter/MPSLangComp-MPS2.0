package DummyLang.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Program extends BaseConcept implements INamedConcept {
  public static final String concept = "DummyLang.structure.Program";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String VARS = "vars";

  public Program(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Program.NAME);
  }

  public void setName(String value) {
    this.setProperty(Program.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Program.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Program.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Program.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Program.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Program.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Program.VIRTUAL_PACKAGE, value);
  }

  public int getVarsesCount() {
    return this.getChildCount(Program.VARS);
  }

  public Iterator<VarDecl> varses() {
    return this.children(VarDecl.class, Program.VARS);
  }

  public List<VarDecl> getVarses() {
    return this.getChildren(VarDecl.class, Program.VARS);
  }

  public void addVars(VarDecl node) {
    this.addChild(Program.VARS, node);
  }

  public void insertVars(VarDecl prev, VarDecl node) {
    this.insertChild(prev, Program.VARS, node);
  }

  public static Program newInstance(SModel sm, boolean init) {
    return (Program) SModelUtil_new.instantiateConceptDeclaration("DummyLang.structure.Program", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Program newInstance(SModel sm) {
    return Program.newInstance(sm, false);
  }
}
