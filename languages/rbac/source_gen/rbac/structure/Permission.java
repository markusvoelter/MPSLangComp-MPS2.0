package rbac.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Permission extends BaseConcept {
  public static final String concept = "rbac.structure.Permission";
  public static final String RIGHT = "right";
  public static final String ROLE = "role";
  public static final String RESOURCES = "resources";

  public Permission(SNode node) {
    super(node);
  }

  public Right getRight() {
    String value = super.getProperty(Permission.RIGHT);
    return Right.parseValue(value);
  }

  public void setRight(Right value) {
    super.setProperty(Permission.RIGHT, value.getValueAsString());
  }

  public Role getRole() {
    return (Role) this.getReferent(Role.class, Permission.ROLE);
  }

  public void setRole(Role node) {
    super.setReferent(Permission.ROLE, node);
  }

  public int getResourcesesCount() {
    return this.getChildCount(Permission.RESOURCES);
  }

  public Iterator<Resource> resourceses() {
    return this.children(Resource.class, Permission.RESOURCES);
  }

  public List<Resource> getResourceses() {
    return this.getChildren(Resource.class, Permission.RESOURCES);
  }

  public void addResources(Resource node) {
    this.addChild(Permission.RESOURCES, node);
  }

  public void insertResources(Resource prev, Resource node) {
    this.insertChild(prev, Permission.RESOURCES, node);
  }

  public static Permission newInstance(SModel sm, boolean init) {
    return (Permission) SModelUtil_new.instantiateConceptDeclaration("rbac.structure.Permission", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Permission newInstance(SModel sm) {
    return Permission.newInstance(sm, false);
  }
}
