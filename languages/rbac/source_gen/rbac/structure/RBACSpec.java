package rbac.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RBACSpec extends BaseConcept {
  public static final String concept = "rbac.structure.RBACSpec";
  public static final String USERS = "users";
  public static final String ROLES = "roles";
  public static final String PERMISSIONS = "permissions";

  public RBACSpec(SNode node) {
    super(node);
  }

  public int getUsersesCount() {
    return this.getChildCount(RBACSpec.USERS);
  }

  public Iterator<User> userses() {
    return this.children(User.class, RBACSpec.USERS);
  }

  public List<User> getUserses() {
    return this.getChildren(User.class, RBACSpec.USERS);
  }

  public void addUsers(User node) {
    this.addChild(RBACSpec.USERS, node);
  }

  public void insertUsers(User prev, User node) {
    this.insertChild(prev, RBACSpec.USERS, node);
  }

  public int getRolesesCount() {
    return this.getChildCount(RBACSpec.ROLES);
  }

  public Iterator<Role> roleses() {
    return this.children(Role.class, RBACSpec.ROLES);
  }

  public List<Role> getRoleses() {
    return this.getChildren(Role.class, RBACSpec.ROLES);
  }

  public void addRoles(Role node) {
    this.addChild(RBACSpec.ROLES, node);
  }

  public void insertRoles(Role prev, Role node) {
    this.insertChild(prev, RBACSpec.ROLES, node);
  }

  public int getPermissionsesCount() {
    return this.getChildCount(RBACSpec.PERMISSIONS);
  }

  public Iterator<Permission> permissionses() {
    return this.children(Permission.class, RBACSpec.PERMISSIONS);
  }

  public List<Permission> getPermissionses() {
    return this.getChildren(Permission.class, RBACSpec.PERMISSIONS);
  }

  public void addPermissions(Permission node) {
    this.addChild(RBACSpec.PERMISSIONS, node);
  }

  public void insertPermissions(Permission prev, Permission node) {
    this.insertChild(prev, RBACSpec.PERMISSIONS, node);
  }

  public static RBACSpec newInstance(SModel sm, boolean init) {
    return (RBACSpec) SModelUtil_new.instantiateConceptDeclaration("rbac.structure.RBACSpec", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RBACSpec newInstance(SModel sm) {
    return RBACSpec.newInstance(sm, false);
  }
}
