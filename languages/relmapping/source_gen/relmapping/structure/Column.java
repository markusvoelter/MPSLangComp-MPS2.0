package relmapping.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Column extends BaseConcept implements INamedConcept {
  public static final String concept = "relmapping.structure.Column";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String MAPPER = "mapper";
  public static final String TYPE = "type";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Column(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Column.NAME);
  }

  public void setName(String value) {
    this.setProperty(Column.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Column.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Column.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Column.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Column.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Column.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Column.VIRTUAL_PACKAGE, value);
  }

  public ColumnMapper getMapper() {
    return (ColumnMapper) this.getChild(ColumnMapper.class, Column.MAPPER);
  }

  public void setMapper(ColumnMapper node) {
    super.setChild(Column.MAPPER, node);
  }

  public DataType getType() {
    return (DataType) this.getChild(DataType.class, Column.TYPE);
  }

  public void setType(DataType node) {
    super.setChild(Column.TYPE, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Column.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Column.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Column.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Column.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Column.SMODEL_ATTRIBUTE, node);
  }

  public static Column newInstance(SModel sm, boolean init) {
    return (Column) SModelUtil_new.instantiateConceptDeclaration("relmapping.structure.Column", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Column newInstance(SModel sm) {
    return Column.newInstance(sm, false);
  }
}
