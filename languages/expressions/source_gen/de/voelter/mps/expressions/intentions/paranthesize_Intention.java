package de.voelter.mps.expressions.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class paranthesize_Intention extends BaseIntention implements Intention {
  public paranthesize_Intention() {
  }

  public String getConcept() {
    return "de.voelter.mps.expressions.structure.Expression";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Parenthesize";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return !(SNodeOperations.isInstanceOf(node, "de.voelter.mps.expressions.structure.ParensExpression"));
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode parens = SConceptOperations.createNewNode("de.voelter.mps.expressions.structure.ParensExpression", null);
    SNodeOperations.replaceWithAnother(node, parens);
    SLinkOperations.setTarget(parens, "expr", node, true);
  }

  public String getLocationString() {
    return "de.voelter.mps.expressions.intentions";
  }
}
