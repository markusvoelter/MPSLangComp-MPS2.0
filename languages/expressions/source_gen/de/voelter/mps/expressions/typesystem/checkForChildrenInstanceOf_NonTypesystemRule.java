package de.voelter.mps.expressions.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import de.voelter.mps.expressions.behavior.BinaryExpression_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class checkForChildrenInstanceOf_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkForChildrenInstanceOf_NonTypesystemRule() {
  }

  public void applyRule(final SNode be, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode cc = BinaryExpression_Behavior.call_childTypeMustBeInstanceOf_8860443239512166656(be);
    if (cc == null) {
      return;
    }
    if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(be, "left", true)), NameUtil.nodeFQName(cc)) && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(be, "right", true)), NameUtil.nodeFQName(cc))) {
      return;
    }
    SNode cc2 = BinaryExpression_Behavior.call_childTypeMustBeInstanceOf2_2088909457728257441(be);
    if (cc2 == null) {
      return;
    }
    if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(be, "left", true)), NameUtil.nodeFQName(cc2)) && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(be, "right", true)), NameUtil.nodeFQName(cc2))) {
      return;
    }
    if (cc != null && cc2 != null) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(be, "cannot be used here, left or right type is not " + SPropertyOperations.getString(cc, "name") + " or " + SPropertyOperations.getString(cc2, "name"), "r:1f4b6c73-0d50-4599-bc8a-9f6948adf243(de.voelter.mps.expressions.typesystem)", "2088909457728257577", null, errorTarget);
      }
      return;
    }
    {
      MessageTarget errorTarget = new NodeMessageTarget();
      IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(be, "cannot be used here, left or right type is not " + SPropertyOperations.getString(cc, "name"), "r:1f4b6c73-0d50-4599-bc8a-9f6948adf243(de.voelter.mps.expressions.typesystem)", "2088909457728257625", null, errorTarget);
    }
  }

  public String getApplicableConceptFQName() {
    return "de.voelter.mps.expressions.structure.BinaryExpression";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
