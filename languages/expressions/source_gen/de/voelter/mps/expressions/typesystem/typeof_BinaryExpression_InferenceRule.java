package de.voelter.mps.expressions.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_BinaryExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_BinaryExpression_InferenceRule() {
  }

  public void applyRule(final SNode be, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode left = typeCheckingContext.typeOf(SLinkOperations.getTarget(be, "left", true), "r:1f4b6c73-0d50-4599-bc8a-9f6948adf243(de.voelter.mps.expressions.typesystem)", "3406978297571773916", true);
      typeCheckingContext.whenConcrete(left, new Runnable() {
        public void run() {
          {
            final SNode right = typeCheckingContext.typeOf(SLinkOperations.getTarget(be, "right", true), "r:1f4b6c73-0d50-4599-bc8a-9f6948adf243(de.voelter.mps.expressions.typesystem)", "3406978297571773930", true);
            typeCheckingContext.whenConcrete(right, new Runnable() {
              public void run() {
                SNode optype = typeCheckingContext.getOverloadedOperationType(be, typeCheckingContext.getRepresentative(left), typeCheckingContext.getRepresentative(right));
                if (optype != null) {
                  {
                    SNode _nodeToCheck_1029348928467 = be;
                    EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:1f4b6c73-0d50-4599-bc8a-9f6948adf243(de.voelter.mps.expressions.typesystem)", "3406978297571773966", 0, null);
                    typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:1f4b6c73-0d50-4599-bc8a-9f6948adf243(de.voelter.mps.expressions.typesystem)", "3406978297571773963", true), (SNode) optype, _info_12389875345);
                  }
                } else {
                  {
                    MessageTarget errorTarget = new NodeMessageTarget();
                    IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(be, "operator " + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(be), "name") + " cannot be applied to " + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(typeCheckingContext.getRepresentative(left)), "name") + "/" + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(typeCheckingContext.getRepresentative(right)), "name"), "r:1f4b6c73-0d50-4599-bc8a-9f6948adf243(de.voelter.mps.expressions.typesystem)", "3406978297571773976", null, errorTarget);
                  }
                }
              }
            }, "r:1f4b6c73-0d50-4599-bc8a-9f6948adf243(de.voelter.mps.expressions.typesystem)", "3406978297571773927", false, false);
          }
        }
      }, "r:1f4b6c73-0d50-4599-bc8a-9f6948adf243(de.voelter.mps.expressions.typesystem)", "3406978297571773913", false, false);
    }
  }

  public String getApplicableConceptFQName() {
    return "de.voelter.mps.expressions.structure.BinaryExpression";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
