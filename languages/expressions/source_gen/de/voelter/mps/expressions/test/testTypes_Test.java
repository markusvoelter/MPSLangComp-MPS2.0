package de.voelter.mps.expressions.test;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

@MPSLaunch
public class testTypes_Test extends BaseTransformationTest {
  @Test
  public void test_TestTypes() throws Throwable {
    this.initTest("/Users/markus/Documents/mps-demos/2-MPS-Language-Composition-Demos-neu/langcompdemo.mpr", "r:b733c45a-9b8c-4cae-8785-78801adc868d(de.voelter.mps.expressions.test)");
    this.runTest("de.voelter.mps.expressions.test.testTypes_Test$TestBody", "test_TestTypes", true);
  }

  @Test
  public void test_TypesCheck2006351577540640294() throws Throwable {
    this.initTest("/Users/markus/Documents/mps-demos/2-MPS-Language-Composition-Demos-neu/langcompdemo.mpr", "r:b733c45a-9b8c-4cae-8785-78801adc868d(de.voelter.mps.expressions.test)");
    this.runTest("de.voelter.mps.expressions.test.testTypes_Test$TestBody", "test_TypesCheck2006351577540640294", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_TestTypes() throws Exception {
      this.addNodeById("4667664698752168963");
      assert SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SNodeOperations.cast(this.getNodeById("4667664698752168965"), "de.voelter.mps.expressions.structure.IntegerLiteral")), "de.voelter.mps.expressions.structure.IntType");
      assert SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SNodeOperations.cast(this.getNodeById("4667664698752168966"), "de.voelter.mps.expressions.structure.StringLiteral")), "de.voelter.mps.expressions.structure.StringLiteral");
    }

    public void test_TypesCheck2006351577540640294() throws Exception {
      SNode operation = SNodeOperations.cast(this.getRealNodeById("2006351577540640294"), "jetbrains.mps.lang.test.structure.NodeOperation");
      BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(operation, "jetbrains.mps.lang.test.structure.NodeOperation"), "virtual_perform_1215601182156", new Class[]{SNode.class, SNode.class}, this.getRealNodeById("4667664698752168964"));
    }
  }
}
