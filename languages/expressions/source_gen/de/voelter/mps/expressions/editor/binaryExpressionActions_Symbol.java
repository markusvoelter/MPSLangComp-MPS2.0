package de.voelter.mps.expressions.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.EditorCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.CellConditions;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;

public class binaryExpressionActions_Symbol {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new binaryExpressionActions_Symbol.binaryExpressionActions_Symbol_DELETE(node));
  }

  public static class binaryExpressionActions_Symbol_DELETE extends EditorCellAction {
    /*package*/ SNode myNode;

    public binaryExpressionActions_Symbol_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode newExpression = SLinkOperations.getTarget(node, "right", true);
      if (newExpression == null) {
        newExpression = SLinkOperations.getTarget(node, "left", true);
      }
      SNodeOperations.replaceWithAnother(node, newExpression);
      editorContext.flushEvents();
      EditorComponent editor = editorContext.getNodeEditorComponent();
      EditorCell cell = editor.findNodeCell(newExpression);
      if (cell != null) {
        EditorCell firstLeaf = cell.getFirstLeaf(CellConditions.SELECTABLE);
        editor.changeSelection(firstLeaf);
        if (firstLeaf instanceof EditorCell_Label) {
          ((EditorCell_Label) firstLeaf).home();
        }
      }
    }
  }
}
