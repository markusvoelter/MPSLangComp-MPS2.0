package de.voelter.mps.expressions.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;

public class PrioUtil {
  public PrioUtil() {
  }

  public static void rotateTree(SNode child, SNode op, boolean isRight) {
    SNode backsideExpr = (isRight ?
      SLinkOperations.getTarget(child, "left", true) :
      SLinkOperations.getTarget(child, "right", true)
    );
    SNodeOperations.detachNode(child);
    SNodeOperations.replaceWithAnother(op, child);
    SNodeOperations.replaceWithAnother(backsideExpr, op);
    if (isRight) {
      SLinkOperations.setTarget(op, "right", backsideExpr, true);
    } else {
      SLinkOperations.setTarget(op, "left", backsideExpr, true);
    }
  }

  public static boolean isBadPriority(SNode child, SNode parent, boolean isRight) {
    return SConceptPropertyOperations.getInteger(child, "priolevel") < SConceptPropertyOperations.getInteger(parent, "priolevel") || (isRight && SConceptPropertyOperations.getInteger(child, "priolevel") == SConceptPropertyOperations.getInteger(parent, "priolevel"));
  }

  public static void checkOperationWRTPriority(SNode binOp) {
    checkOperationChildWRTPriority(binOp, false);
    checkOperationChildWRTPriority(binOp, true);
    checkOpeartionParentWRTPriority(binOp);
  }

  private static void checkOperationChildWRTPriority(SNode node, boolean isRight) {
    if (!(SNodeOperations.isInstanceOf(node, "de.voelter.mps.expressions.structure.BinaryExpression"))) {
      return;
    }
    SNode binOp = SNodeOperations.cast(node, "de.voelter.mps.expressions.structure.BinaryExpression");
    SNode sideExpr = (isRight ?
      SLinkOperations.getTarget(binOp, "right", true) :
      SLinkOperations.getTarget(binOp, "left", true)
    );
    if (SNodeOperations.isInstanceOf(sideExpr, "de.voelter.mps.expressions.structure.BinaryExpression")) {
      SNode sideChild = SNodeOperations.cast(sideExpr, "de.voelter.mps.expressions.structure.BinaryExpression");
      if (isBadPriority(sideChild, binOp, isRight)) {
        PrioUtil.rotateTree(sideChild, binOp, isRight);
        checkOperationWRTPriority(SNodeOperations.cast(node, "de.voelter.mps.expressions.structure.BinaryExpression"));
      }
    }
  }

  private static void checkOpeartionParentWRTPriority(SNode node) {
    if (SNodeOperations.getParent(node) == null) {
      return;
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "de.voelter.mps.expressions.structure.BinaryExpression")) {
      SNode parent = SNodeOperations.cast(SNodeOperations.getParent(node), "de.voelter.mps.expressions.structure.BinaryExpression");
      boolean isRight = false;
      if (SLinkOperations.getTarget(parent, "right", true) == node) {
        isRight = true;
      } else if (SLinkOperations.getTarget(parent, "left", true) == node) {
        isRight = false;
      }
      if (PrioUtil.isBadPriority(node, parent, isRight)) {
        PrioUtil.rotateTree(node, parent, isRight);
        checkOpeartionParentWRTPriority(node);
      }
    }
  }
}
